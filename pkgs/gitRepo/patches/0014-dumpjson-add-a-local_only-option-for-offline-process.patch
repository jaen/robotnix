From 394b8dd50c263b18561386a85bf5294fda1fa5a2 Mon Sep 17 00:00:00 2001
From: Daniel Fullmer <danielrf12@gmail.com>
Date: Sat, 11 Jul 2020 11:25:38 -0700
Subject: [PATCH 14/16] dumpjson: add a "local_only" option for offline
 processing

---
 subcmds/dumpjson.py | 38 ++++++++++++++++++++++++--------------
 1 file changed, 24 insertions(+), 14 deletions(-)

diff --git a/subcmds/dumpjson.py b/subcmds/dumpjson.py
index 4648e10..bbb4245 100644
--- a/subcmds/dumpjson.py
+++ b/subcmds/dumpjson.py
@@ -59,14 +59,9 @@ import re
 from command import Command, MirrorSafeCommand
 
 def _fetch_revs(p, sem):
-    if re.match("[0-9a-f]{40}", p.revisionExpr):
-        # Use revisionExpr if it is already a SHA1 hash
-        p.rev = p.revisionExpr
-    else:
-        # Otherwise we need to grab the hash from the remote source
-        with sem:
-            p.rev = p._LsRemote(p.revisionExpr).split('\t')[0]
-            assert p.rev != ""
+  with sem:
+      p.rev = p._LsRemote(p.revisionExpr).split('\t')[0]
+      assert p.rev != ""
 
 class Dumpjson(Command, MirrorSafeCommand):
   common = True
@@ -81,16 +76,31 @@ class Dumpjson(Command, MirrorSafeCommand):
     p.add_option('-j', '--jobs',
                  dest='jobs', action='store', type='int', default=8,
                  help="number of projects to check simultaneously")
+    p.add_option('-l', '--local-only',
+                 dest='local_only', action='store_true',
+                 help="don't fetch project revisions even if they are missing")
 
   def Execute(self, opt, args):
     all_projects = self.GetProjects(args, missing_ok=True, submodules_ok=False)
 
-    sem = _threading.Semaphore(opt.jobs)
-    threads = [ _threading.Thread(target=_fetch_revs, args=(p, sem)) for p in all_projects ]
-    for t in threads:
-        t.start()
-    for t in threads:
-        t.join()
+    # Fill out rev if we already have the information available
+    to_fetch = []
+    for p in all_projects:
+      if re.match("[0-9a-f]{40}", p.revisionExpr):
+          # Use revisionExpr if it is already a SHA1 hash
+          p.rev = p.revisionExpr
+      else:
+        p.rev = None
+        to_fetch.append(p)
+
+    if not opt.local_only:
+      # Fetch rev for projects we don't know yet
+      sem = _threading.Semaphore(opt.jobs)
+      threads = [ _threading.Thread(target=_fetch_revs, args=(p, sem)) for p in to_fetch ]
+      for t in threads:
+          t.start()
+      for t in threads:
+          t.join()
 
     data = {}
     for p in all_projects:
-- 
2.44.0

